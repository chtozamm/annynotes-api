// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notes.sql

package database

import (
	"context"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (id, author, message, user_id, verified) 
VALUES (?, ?, ?, ?, ?) 
RETURNING id, author, message, updated_at, created_at, user_id, verified
`

type CreateNoteParams struct {
	ID       string      `json:"id"`
	Author   string      `json:"author"`
	Message  string      `json:"message"`
	UserID   interface{} `json:"user_id"`
	Verified int64       `json:"verified"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote,
		arg.ID,
		arg.Author,
		arg.Message,
		arg.UserID,
		arg.Verified,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Message,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UserID,
		&i.Verified,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const fetchNoteByID = `-- name: FetchNoteByID :one
SELECT id, author, message, updated_at, created_at, user_id, verified FROM notes WHERE id = ?
`

func (q *Queries) FetchNoteByID(ctx context.Context, id string) (Note, error) {
	row := q.db.QueryRowContext(ctx, fetchNoteByID, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Message,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UserID,
		&i.Verified,
	)
	return i, err
}

const fetchNotes = `-- name: FetchNotes :many
SELECT id, author, message, updated_at, created_at, user_id, verified FROM notes
ORDER BY created_at ASC
`

func (q *Queries) FetchNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, fetchNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Message,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.UserID,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchNotesDESC = `-- name: FetchNotesDESC :many
SELECT id, author, message, updated_at, created_at, user_id, verified FROM notes
ORDER BY created_at DESC
`

func (q *Queries) FetchNotesDESC(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, fetchNotesDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Message,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.UserID,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchNotesFromAuthor = `-- name: FetchNotesFromAuthor :many
SELECT id, author, message, updated_at, created_at, user_id, verified FROM notes
WHERE author = ?
ORDER BY created_at ASC
`

func (q *Queries) FetchNotesFromAuthor(ctx context.Context, author string) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, fetchNotesFromAuthor, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Message,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.UserID,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchNotesFromAuthorDESC = `-- name: FetchNotesFromAuthorDESC :many
SELECT id, author, message, updated_at, created_at, user_id, verified FROM notes
WHERE author = ?
ORDER BY created_at DESC
`

func (q *Queries) FetchNotesFromAuthorDESC(ctx context.Context, author string) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, fetchNotesFromAuthorDESC, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Message,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.UserID,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes SET author = ?, message = ? 
WHERE id = ?
RETURNING id, author, message, updated_at, created_at, user_id, verified
`

type UpdateNoteParams struct {
	Author  string `json:"author"`
	Message string `json:"message"`
	ID      string `json:"id"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNote, arg.Author, arg.Message, arg.ID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Message,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UserID,
		&i.Verified,
	)
	return i, err
}
